from Compiler.mpc_math import log_fx
from Compiler.mpc_math import cos
from Compiler.mpc_math import sin
from Compiler.mpc_math import sqrt
from Compiler.types import *
from Compiler.library import *

from Compiler import forwardPass
from Compiler import securePersonalizer
import json
# @args - Public inputs
settings_map = {"batch": "true", "normalize": "source", "run_personalizor": "true", "test_data_len": 1000, "kshot": 10, "shapes": "[[16, 12, 2],[16],[128, 16, 8],[128],[100, 256],[100]]", "window_size": 50, "n_features": 12, "n_outputs": 10}


print(settings_map)

shapes = json.loads(settings_map["shapes"])
test_data_len = int(settings_map["test_data_len"])
kshot = int(settings_map["kshot"])
window_size = int(settings_map["window_size"])
n_features = int(settings_map["n_features"])
n_outputs = int(settings_map["n_outputs"])
run_personalizor = settings_map["run_personalizor"]

mean = sfix.Array(shapes[0][1])
std = sfix.Array(shapes[0][1])

normalize_securely = settings_map["normalize"].lower() == "source"

batch = settings_map["batch"].lower() == "true"

if normalize_securely:
    print("normalizing securely")
    mean.input_from(0)
    std.input_from(0)

    # Just for testing purposes: TODO fix things and get rid of this
    mean.assign_all(sfix(0))
    std.assign_all(sfix(1))

conv1_w = sfix.Tensor(shapes[0])

conv1_b = sfix.Array(shapes[1][0])
conv1_w.input_from(0)
conv1_b.input_from(0)

conv2_w = sfix.Tensor(shapes[2])
conv2_b = sfix.Array(shapes[3][0])
conv2_w.input_from(0)
conv2_b.input_from(0)
dense1_w = sfix.Tensor(shapes[4])
dense1_b = sfix.Array(shapes[5][0])
dense1_w.input_from(0)
dense1_b.input_from(0)


def relu(x):
    a = (x > 0)
    return a * x


def hard_sigmoid(x):
    lt_25 = x < -2.5
    gt_25 = x > 2.5
    return gt_25 + (1 - lt_25) * (1 - gt_25) * (0.2 * x + 0.5)


layers = forwardPass.Layers()

## CONSTANT EXAMPLE
# conv1_input_shape = (50, 12)
# conv1_output_shape = (49, 16)
# conv1 = forwardPass.Conv1D(conv1_input_shape, conv1_output_shape, conv1_w, conv1_b, hard_sigmoid)
# # print(conv1_w)
#
# max_pooling1_input_shape = conv1_output_shape
# max_pooling1_output_shape = (24, 16)
# max1 = forwardPass.MaxPooling1D(conv1_input_shape, conv1_output_shape, 2, 16)
#
# conv2_input_shape = max_pooling1_output_shape
# conv2_output_shape = (17, 128)
# conv2 = forwardPass.Conv1D(conv1_input_shape, conv1_output_shape, conv2_w, conv2_b, hard_sigmoid)
#
# max_pooling2_input_shape = conv2_output_shape
# max_pooling2_output_shape = (2, 128)
# max2 = forwardPass.MaxPooling1D(conv1_input_shape, conv1_output_shape, 8, 128, flatten_after=True)
#
# dense1_input = 256
# dense1_output = 50
# dense1 = forwardPass.Dense(dense1_input, dense1_output, dense1_w, dense1_b, relu)

## CONSTANT STRUCTURE, DYNAMIC DIMs (non-dynmic widths for pooling layers..)
conv1_input_shape = (n_outputs, n_features)
conv1_output_shape = (n_outputs - shapes[0][2] + 1, shapes[0][0])
conv1 = forwardPass.Conv1D(conv1_input_shape, conv1_output_shape, conv1_w, conv1_b, hard_sigmoid)

max_pooling1_input_shape = conv1_output_shape
max_pooling1_output_shape = ((n_outputs - shapes[0][2])//2, shapes[0][0])
max1 = forwardPass.MaxPooling1D(conv1_input_shape, conv1_output_shape, 2, shapes[0][0])

conv2_input_shape = max_pooling1_output_shape
conv2_output_shape = (max_pooling1_output_shape[0] - shapes[2][2] + 1, shapes[2][0])
conv2 = forwardPass.Conv1D(conv1_input_shape, conv1_output_shape, conv2_w, conv2_b, hard_sigmoid)

max_pooling2_input_shape = conv2_output_shape
max_pooling2_output_shape = (conv2_output_shape[0]//8, shapes[2][0])
max2 = forwardPass.MaxPooling1D(conv1_input_shape, conv1_output_shape, 8, shapes[2][0], flatten_after=True)

dense1_input = shapes[4][0] * shapes[4][1]
dense1_output = shapes[5][0]
dense1 = forwardPass.Dense(dense1_input, dense1_output, dense1_w, dense1_b, relu)

layers.add_layer(conv1)
layers.add_layer(max1)
layers.add_layer(conv2)
layers.add_layer(max2)
layers.add_layer(dense1)
# Grab alice's pre-processed vals
weight_matrix_intermediate = sfix.Matrix(n_outputs, dense1_output)
weight_matrix_intermediate.input_from(0)
# source_data = sfix.Tensor((kshot * n_outputs, n_features, window_size))
# source_labels = sint.Array(kshot * n_outputs)
# source_data.input_from(0)
# source_labels.input_from(0)
target_data = sfix.Tensor((kshot * n_outputs, n_features, window_size))
target_labels = sint.Array(kshot * n_outputs)
target_data.input_from(0)
target_labels.input_from(0)
total_amount_of_data = n_outputs * kshot

# fake_labels = sint.Array(1)
# fake_labels.assign_all(1)

start_timer(timer_id=1)

print_ln("@results")

target_data_pers = target_data

if normalize_securely:
    target_data_norm = sfix.Tensor((kshot * n_outputs, n_features, window_size))
    for i in range(total_amount_of_data):
        for j in range(n_features):
            mean_data = sfix.Array(window_size)
            mean_data.assign_all(mean[j])
            target_data_norm[i][j] = (target_data[i][j] - mean_data)/std[j]

    target_data_pers = target_data_norm

w_matrix = securePersonalizer.personalization(layers, weight_matrix_intermediate, (target_data_pers, target_labels),
                                              total_amount_of_data, dense1_output, n_outputs, kshot)

print_ln("@results")
stop_timer(timer_id=1)

if run_personalizor.lower() == "true":

    start_timer(timer_id=2)

    print_ln("@results")

    test_data = sfix.Tensor((test_data_len, n_features, window_size))
    # test_labels = sint.Array(test_data_len)

    test_data.input_from(0)

    target_data_test = test_data

    if normalize_securely:
        target_test_data_norm = sfix.Tensor((test_data_len, n_features, window_size))
        for i in range(test_data_len):
            for j in range(n_features):
                mean_data = sfix.Array(window_size)
                mean_data.assign_all(mean[j])
                target_test_data_norm[i][j] = (test_data[i][j] - mean_data) / std[j]

        target_data_test = target_test_data_norm

    res = securePersonalizer.infer(layers, w_matrix, target_data_test, dense1_output, batch)

    print_ln("class%s", res.reveal())

    print_ln("@results")
    stop_timer(timer_id=2)

# print_ln("%s", w_matrix.reveal_nested())

# print_ln("%s", conv1_w.reveal_nested())
# print_ln("%s", conv1_b.reveal_nested())
# print_ln("%s", conv2_w.reveal_nested())
# print_ln("%s", conv2_b.reveal_nested())
# print_ln("%s", dense1_w.reveal_nested())
# print_ln("%s", dense1_b.reveal_nested())

# print_ln("%s", input.reveal_nested())


# features = layers.forward(input)
#
# print_ln("%s", features.reveal_nested())
